# Generated by Django 4.1.3 on 2022-11-17 07:25

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Employe",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "matriculeEmploye",
                    models.CharField(default="AAAA", max_length=5, unique=True),
                ),
                ("nom", models.CharField(max_length=50)),
                ("prenom", models.CharField(max_length=50)),
                (
                    "dateDeNaissance",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                (
                    "codePostalDeNaissance",
                    models.CharField(blank=True, max_length=5, null=True),
                ),
                ("adresse1", models.CharField(blank=True, max_length=100, null=True)),
                ("adresse2", models.CharField(blank=True, max_length=100, null=True)),
                ("codePostal", models.CharField(blank=True, max_length=5, null=True)),
                ("ville", models.CharField(blank=True, max_length=50, null=True)),
                ("role", models.CharField(max_length=50)),
            ],
            managers=[("objects", django.contrib.auth.models.UserManager()),],
        ),
        migrations.CreateModel(
            name="Question",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("titre", models.CharField(blank=True, max_length=100, null=True)),
                ("intitule", models.CharField(max_length=100)),
                ("bonneReponse", models.IntegerField()),
                ("timer", models.DurationField(blank=True, null=True)),
                ("coefficient", models.IntegerField()),
                ("feedback", models.CharField(blank=True, max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Quiz",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("intituleQuiz", models.CharField(max_length=5)),
                ("noteMini", models.IntegerField(blank=True, null=True)),
                ("lienXml", models.CharField(blank=True, max_length=500, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Role",
            fields=[
                (
                    "codeRole",
                    models.CharField(max_length=50, primary_key=True, serialize=False),
                ),
                ("nomRole", models.CharField(blank=True, max_length=50, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Service",
            fields=[
                (
                    "codeService",
                    models.CharField(
                        default="MKT",
                        max_length=5,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("intitule", models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name="Session",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("intituleSession", models.CharField(max_length=50)),
                ("dateDebutSession", models.DateTimeField(blank=True, null=True)),
                ("dateFinSession", models.DateTimeField(blank=True, null=True)),
                (
                    "idQuiz",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="dashboard.quiz",
                    ),
                ),
                (
                    "idService",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="dashboard.service",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Resultat",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "resultat",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=5, null=True
                    ),
                ),
                (
                    "idSession",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="dashboard.session",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Reponse",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("bonneReponse", models.BooleanField(blank=True, null=True)),
                ("intituleReponse", models.CharField(max_length=100)),
                (
                    "idQuestion",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="dashboard.question",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="quiz",
            name="idService",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.DO_NOTHING, to="dashboard.service"
            ),
        ),
        migrations.AddField(
            model_name="question",
            name="idQuiz",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.DO_NOTHING, to="dashboard.quiz"
            ),
        ),
        migrations.CreateModel(
            name="Etre_attribue",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "idEmploye",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "idSession",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="dashboard.session",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="employe",
            name="codeRole",
            field=models.ForeignKey(
                db_column="codeRole",
                default="admin",
                on_delete=django.db.models.deletion.DO_NOTHING,
                to="dashboard.role",
            ),
        ),
        migrations.AddField(
            model_name="employe",
            name="codeService",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                to="dashboard.service",
            ),
        ),
        migrations.AddField(
            model_name="employe",
            name="groups",
            field=models.ManyToManyField(
                blank=True,
                help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                related_name="user_set",
                related_query_name="user",
                to="auth.group",
                verbose_name="groups",
            ),
        ),
        migrations.AddField(
            model_name="employe",
            name="user_permissions",
            field=models.ManyToManyField(
                blank=True,
                help_text="Specific permissions for this user.",
                related_name="user_set",
                related_query_name="user",
                to="auth.permission",
                verbose_name="user permissions",
            ),
        ),
        migrations.AddConstraint(
            model_name="employe",
            constraint=models.UniqueConstraint(
                fields=("matriculeEmploye",), name="unique matricule"
            ),
        ),
        migrations.AddConstraint(
            model_name="employe",
            constraint=models.UniqueConstraint(
                condition=models.Q(("codeRole", "chef")),
                fields=("codeRole", "codeService"),
                name="unique chef de secteur",
            ),
        ),
    ]
